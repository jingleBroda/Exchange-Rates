// Generated by Dagger (https://dagger.dev).
package com.example.exchangerates.app.di.module;

import com.example.exchangerates.data.retrofite.RetrofiteService;
import com.example.exchangerates.data.room.ExchangeRatesRoomDao;
import com.example.exchangerates.domain.repository.RepositoryExchangeRates;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_MakeRepositoryFactory implements Factory<RepositoryExchangeRates> {
  private final RepositoryModule module;

  private final Provider<ExchangeRatesRoomDao> dbDaoProvider;

  private final Provider<RetrofiteService> retroServiceProvider;

  public RepositoryModule_MakeRepositoryFactory(RepositoryModule module,
      Provider<ExchangeRatesRoomDao> dbDaoProvider,
      Provider<RetrofiteService> retroServiceProvider) {
    this.module = module;
    this.dbDaoProvider = dbDaoProvider;
    this.retroServiceProvider = retroServiceProvider;
  }

  @Override
  public RepositoryExchangeRates get() {
    return makeRepository(module, dbDaoProvider.get(), retroServiceProvider.get());
  }

  public static RepositoryModule_MakeRepositoryFactory create(RepositoryModule module,
      Provider<ExchangeRatesRoomDao> dbDaoProvider,
      Provider<RetrofiteService> retroServiceProvider) {
    return new RepositoryModule_MakeRepositoryFactory(module, dbDaoProvider, retroServiceProvider);
  }

  public static RepositoryExchangeRates makeRepository(RepositoryModule instance,
      ExchangeRatesRoomDao dbDao, RetrofiteService retroService) {
    return Preconditions.checkNotNullFromProvides(instance.makeRepository(dbDao, retroService));
  }
}
