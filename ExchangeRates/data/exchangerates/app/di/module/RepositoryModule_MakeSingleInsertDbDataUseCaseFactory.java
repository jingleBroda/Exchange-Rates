// Generated by Dagger (https://dagger.dev).
package com.example.exchangerates.app.di.module;

import com.example.exchangerates.domain.repository.RepositoryExchangeRates;
import com.example.exchangerates.domain.usecase.MakeSingleInsertDbDataUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_MakeSingleInsertDbDataUseCaseFactory implements Factory<MakeSingleInsertDbDataUseCase> {
  private final RepositoryModule module;

  private final Provider<RepositoryExchangeRates> repositoryProvider;

  public RepositoryModule_MakeSingleInsertDbDataUseCaseFactory(RepositoryModule module,
      Provider<RepositoryExchangeRates> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public MakeSingleInsertDbDataUseCase get() {
    return makeSingleInsertDbDataUseCase(module, repositoryProvider.get());
  }

  public static RepositoryModule_MakeSingleInsertDbDataUseCaseFactory create(
      RepositoryModule module, Provider<RepositoryExchangeRates> repositoryProvider) {
    return new RepositoryModule_MakeSingleInsertDbDataUseCaseFactory(module, repositoryProvider);
  }

  public static MakeSingleInsertDbDataUseCase makeSingleInsertDbDataUseCase(
      RepositoryModule instance, RepositoryExchangeRates repository) {
    return Preconditions.checkNotNullFromProvides(instance.makeSingleInsertDbDataUseCase(repository));
  }
}
