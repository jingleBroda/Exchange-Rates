// Generated by Dagger (https://dagger.dev).
package com.example.exchangerates.app.di.module;

import com.example.exchangerates.data.retrofite.RetrofiteService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RetrofiteModule_CreateRetrofiteServiceFactory implements Factory<RetrofiteService> {
  private final RetrofiteModule module;

  private final Provider<Retrofit> retrofitProvider;

  public RetrofiteModule_CreateRetrofiteServiceFactory(RetrofiteModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public RetrofiteService get() {
    return createRetrofiteService(module, retrofitProvider.get());
  }

  public static RetrofiteModule_CreateRetrofiteServiceFactory create(RetrofiteModule module,
      Provider<Retrofit> retrofitProvider) {
    return new RetrofiteModule_CreateRetrofiteServiceFactory(module, retrofitProvider);
  }

  public static RetrofiteService createRetrofiteService(RetrofiteModule instance,
      Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.createRetrofiteService(retrofit));
  }
}
