// Generated by Dagger (https://dagger.dev).
package com.example.exchangerates.data.repositoryImpl;

import com.example.exchangerates.data.retrofite.RetrofiteService;
import com.example.exchangerates.data.room.ExchangeRatesRoomDao;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryImpl_Factory implements Factory<RepositoryImpl> {
  private final Provider<ExchangeRatesRoomDao> dbDaoProvider;

  private final Provider<RetrofiteService> retroServiceProvider;

  public RepositoryImpl_Factory(Provider<ExchangeRatesRoomDao> dbDaoProvider,
      Provider<RetrofiteService> retroServiceProvider) {
    this.dbDaoProvider = dbDaoProvider;
    this.retroServiceProvider = retroServiceProvider;
  }

  @Override
  public RepositoryImpl get() {
    return newInstance(dbDaoProvider.get(), retroServiceProvider.get());
  }

  public static RepositoryImpl_Factory create(Provider<ExchangeRatesRoomDao> dbDaoProvider,
      Provider<RetrofiteService> retroServiceProvider) {
    return new RepositoryImpl_Factory(dbDaoProvider, retroServiceProvider);
  }

  public static RepositoryImpl newInstance(ExchangeRatesRoomDao dbDao,
      RetrofiteService retroService) {
    return new RepositoryImpl(dbDao, retroService);
  }
}
